import base64
from io import BytesIO

from django.core.paginator import Paginator
from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.db.models import Q
from .models import DataCase, TextsCase
from .templates.const_for_form import const_courts, const_instances, const_type_of_legal_proceedings, const_judges, const_years, const_courts_short, const_type_of_legal_proceedings_sort, const_instances_short



def TestDocument():
    docx_title = "TEST_DOCUMENT.docx"
    # ---- Cover Letter ----
    base64_docx = ''

    # b64_doc = base64.b64decode(base64_docx)
    # bytes_doc = base64.decodebytes(b64_doc)
    # bytes_io_doc = BytesIO(bytes_doc)
    # document = Document()
    # document.save(bytes_io_doc)
    # document.save('D:/demo.docx')
    # # Prepare document for download
    # # -----------------------------
    # length = bytes_io_doc.tell()
    # bytes_io_doc.seek(0)
    # response = HttpResponse(
    #     bytes_io_doc.getvalue(),
    #     content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    # )
    # response['Content-Disposition'] = 'attachment; filename=' + docx_title
    # response['Content-Length'] = length
    # print(response)
    a = "<script>\ndocument.getElementById('download').onclick = () = > {\n" + \
        f"base64 = '{base64_docx}'\n" + \
        "link = document.createElement('a');\n" \
        "link.href = 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,' + base64;\n" \
        "link.download = 'my-document.docx';\n" \
        "link.click();\n};\n" \
        "</script>"
    a = "<script>\ndocument.getElementById('download').onclick = () = > {\n" + \
        f"base64 = '{base64_docx}'\n" + \
        "link = document.createElement('a');\n" \
        "link.href = 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,' + base64;\n" \
        "link.download = 'my-document.docx';\n" \
        "link.click();\n};\n" \
        "</script>"
    return base64_docx


def index(request):
    return render(request, 'main/index.html', {'title': 'Главная страница', 'tasks': ['4']})


def detail(request):
    try:
        data_case = DataCase.objects.all()
        data_case_texts = TextsCase.objects.all()
        data_case = data_case.filter(ObjectID=request.GET['ObjectID'])
        docx_base64 = ''
        name_on_site = ''
        name_doc = ''
        date_doc = ''
        try:
            data_case_texts = data_case_texts.filter(ObjectID=request.GET['ObjectID'])
            for one_data_case_texts in data_case_texts:
                if one_data_case_texts.PubAttach:
                    docx_base64 = one_data_case_texts.PubAttach
                    name_on_site = one_data_case_texts.FirstInstantDoc
                    name_doc = one_data_case_texts.FirstInstantDecisioncText
                    date_doc = one_data_case_texts.docdate
                    break
        except:
            pass
        return render(request, 'main/detail.html', {
            'title': 'Детали по делу',
            'data': data_case[0],
            'docx_base64': docx_base64,
            'name_on_site': name_on_site,
            'name_doc': name_doc,
            'date_doc': date_doc,
        })
    except:
        return render(request, 'main/detail.html', {'title': 'Детали по делу', 'data': 'Bad'})


def page_split(data, request):
    paginator = Paginator(data, 15)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    return page_obj


def set_func(name):
    data_case = DataCase.objects.all()
    data = []
    for i in data_case.all().values(f"{name}"):
        if i[f"{name}"] not in data:
            data.append(i[f"{name}"])
    return data


def sort_full_name(request, one_filter):
    try:
        full_name = request.GET[one_filter].split()[0]
    except:
        full_name = request.GET[one_filter]
    try:
        full_name += f' {request.GET[one_filter].split()[1][0]}.'
        full_name += f'{request.GET[one_filter].split()[2][0]}.'
    except:
        pass
    return full_name


def search(request):
    # print(request.GET['Court'])
    data_case = DataCase.objects.all()
    # data_case2 = TextsCase.objects.all()
    # a = []
    # for i in data_case2:
    #     a.append(i.ObjectID)
    # for i in a:
    #     if a.count(i) > 1:
    #         print(i)
    # print(len(a), len(list(set(a))))
    key_for_accused = False
    filters = {}
    params = ''
    if request.method == "GET":
        list_keys = list(request.GET.keys())
        print(list_keys)
        if 'Date' in list_keys:
            filters['Date__year'] = request.GET['Date']
            params += f'&Date={request.GET["Date"]}'
        if ('type_of_legal_proceeding' not in list_keys) and ('ObjectID' not in list_keys):
            detail_filters = const_type_of_legal_proceedings_sort['Административное']
            temp_filter = Q(**{'type_of_legal_proceeding': detail_filters[0]})
            for i in const_type_of_legal_proceedings_sort:
                for detail_filter in const_type_of_legal_proceedings_sort[i]:
                    temp_filter.add(Q(**{'type_of_legal_proceeding': detail_filter}), Q.OR)
            data_case = data_case.filter(temp_filter)
            pass
        for one_filter in ['ObjectID', 'Court', 'type_of_legal_proceeding', 'Judge', 'Name_people', 'Instance']:
            key_add_params = True
            if one_filter in list_keys:
                # print(request.GET[one_filter])
                if request.GET[one_filter]:
                    if request.GET[one_filter].find('Не выбрано') != -1:
                        continue
                    if one_filter == 'type_of_legal_proceeding':
                        if request.GET[one_filter] == 'Уголовное':
                            key_for_accused = True
                        try:
                            if (request.GET['Court'] == 'Верховный суд') and ('Instance' in list_keys):
                                key_type_of_legal_proceeding = False
                            else:
                                key_type_of_legal_proceeding = True
                        except:
                            key_type_of_legal_proceeding = True
                        if key_type_of_legal_proceeding:
                            detail_filters = const_type_of_legal_proceedings_sort[request.GET[one_filter]]
                            temp_filter = Q(**{one_filter: detail_filters[0]})
                            for detail_filter in detail_filters[1:]:
                                temp_filter.add(Q(**{one_filter: detail_filter}), Q.OR)
                            data_case = data_case.filter(temp_filter)
                    elif one_filter == 'Court':
                        filters[f'{one_filter}'] = const_courts_short[request.GET[one_filter]]
                    elif one_filter == 'Judge':
                        full_name = sort_full_name(request, one_filter)
                        filters[f'{one_filter}__icontains'] = full_name
                    elif one_filter == 'Name_people':
                        temp_filter = Q(**{'Plaintiff__icontains': request.GET[one_filter]})
                        temp_filter.add(Q(**{'Defendant__icontains': request.GET[one_filter]}), Q.OR)
                        data_case = data_case.filter(temp_filter)
                    elif one_filter == 'Instance':
                        if request.GET[one_filter] == 'Первая' or request.GET[one_filter] == 'Кассационная':
                            if request.GET[one_filter] == 'Кассационная':
                                if 'Court' not in list_keys:
                                    filters[f'Court'] = const_courts_short['Верховный суд']
                            if 'type_of_legal_proceeding' in list_keys:
                                temp_filter = const_type_of_legal_proceedings_sort[
                                    request.GET['type_of_legal_proceeding']]
                                list_instance = []
                                for i in temp_filter:
                                    if i in const_instances_short[request.GET[one_filter]]:
                                        list_instance.append(i)
                            else:
                                list_instance = const_instances_short[request.GET[one_filter]]
                            temp_filter = Q(**{'type_of_legal_proceeding': list_instance[0]})
                            for detail_instance in list_instance[1:]:
                                temp_filter.add(Q(**{'type_of_legal_proceeding': detail_instance}), Q.OR)
                            data_case = data_case.filter(temp_filter)
                        if request.GET[one_filter] == 'Надзорная':
                            if 'ObjectID' not in list_keys:
                                filters[f'Court'] = '3yru3vyuuyv3r'
                            pass
                    else:
                        filters[f'{one_filter}'] = request.GET[one_filter]
                    if key_add_params:
                        params += f'&{one_filter}={request.GET[one_filter]}'
        # print(filters)
        # print(params)
        data_for_default = {}
        for i in ['Court', 'Instance', 'type_of_legal_proceeding', 'ObjectID', 'Judge', 'Date', 'Name_people', 'Instance']:
            try:
                if request.GET[i].find('Не выбрано') != -1:
                    continue
                data_for_default[i] = request.GET[i]
            except:
                data_for_default[i] = ''
        data_case = data_case.filter(**filters)
        if params:
            params = params
        context = {
            "title": "Поиск по судебным делам",
            "courts": ['Не выбрано '] + const_courts,
            "instances": ['Не выбрано  '] + const_instances,
            "type_of_legal_proceedings": ['Не выбрано   '] + const_type_of_legal_proceedings,
            "judges": ['Не выбрано    '] + const_judges,
            "years": ['Не выбрано     '] + const_years,
            "page_obj": page_split(data_case, request),
            "params": params,
            "count_cases": len(data_case),
            "key_for_accused": key_for_accused,
            "data_for_default": data_for_default,
        }
        return render(request, 'main/search.html', context)
